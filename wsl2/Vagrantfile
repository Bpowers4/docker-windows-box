# -*- mode: ruby -*-
# vi: set ft=ruby :

$script = <<SCRIPT
Write-Host "Enabling WSL 2 feature."
Enable-WindowsOptionalFeature -Online -FeatureName Microsoft-Windows-Subsystem-Linux -NoRestart
Enable-WindowsOptionalFeature -Online -FeatureName VirtualMachinePlatform -NoRestart
SCRIPT

$script2 = <<SCRIPT2
mkdir c:\\distro
cd c:\\distro
Write-Host "Downloading Ubuntu 18.04 WSL distro"
curl.exe -L -o ubuntu1804.appx https://aka.ms/wsl-ubuntu-1804
tar.exe xvf ubuntu1804.appx
[System.Environment]::SetEnvironmentVariable("PATH", $Env:Path + ";C:\\distro", "Machine")

Write-Host "Set WSL default version 2"
wsl --set-default-version 2
Write-Host "Now open a shell and run Ubuntu1804.exe"
SCRIPT2

Vagrant.configure("2") do |config|
  config.vm.box = "windows_10_insider_home"

  config.vm.communicator = "winrm"

  config.winrm.username = "vagrant"
  config.winrm.password = "vagrant"

  config.vm.guest = :windows
  config.windows.halt_timeout = 15

  config.vm.provision "shell", inline: $script, privileged: false
  config.vm.provision "reload"
  config.vm.provision "shell", inline: $script2, privileged: true, powershell_elevated_interactive: true

  ["vmware_fusion", "vmware_workstation"].each do |provider|
    config.vm.provider provider do |v, override|
      v.gui = true
      v.memory = "5120"
      v.cpus = "2"
      v.vmx["vhv.enable"] = "TRUE"
    end
  end

  config.vm.provider "vmware_fusion" do |v|
    v.vmx["gui.fitguestusingnativedisplayresolution"] = "TRUE"
    v.vmx["mks.enable3d"] = "TRUE"
    v.vmx["mks.forceDiscreteGPU"] = "TRUE"
    v.vmx["gui.fullscreenatpoweron"] = "TRUE"
    v.vmx["gui.viewmodeatpoweron"] = "fullscreen"
    v.vmx["gui.lastPoweredViewMode"] = "fullscreen"
    v.enable_vmrun_ip_lookup = false
  end

  config.vm.provider "virtualbox" do |v|
    v.gui = true
    v.memory = "5120"
    v.cpus = "2"
    v.linked_clone = true
  end
end
